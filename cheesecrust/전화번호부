#include <iostream>
#include <map>
#include <string>
#include <vector>
using namespace std;

vector<string> v;

class Node {
   public:
    char key;

    map<char, Node*> children;

    bool isLast = false;

    Node() {
        this->key = '!';
    }

    Node(char key) {
        this->key = key;
    }
};

class Trie {
    Node* head;

   public:
    Trie() {
        this->head = new Node();
    }

    void insert(string word) {
        Node* root = this->head;

        for (int i = 0; i < word.size(); i++) {
            if (root->children.find(word[i]) != root->children.end()) {  // 찾았다
                root = root->children.find(word[i])->second;
                continue;
            }

            Node* tmp = new Node(word[i]);

            root->children[word[i]] = tmp;
            root = root->children[word[i]];
        }

        root->isLast = true;
    }

    bool perfectSearch(string word) {
        Node* root = this->head;
        for (int i = 0; i < word.size(); i++) {
            if (root->children.find(word[i]) != root->children.end()) {
                root = root->children.find(word[i])->second;
            } else {
                return false;
            }
        }
        return root->isLast;
    }

    bool hasPrefix(string word) {
        Node* root = this->head;
        for (int i = 0; i < word.size(); i++) {
            if (root->children.find(word[i]) != root->children.end()) {
                root = root->children.find(word[i])->second;
            } else {
                return false;
            }
        }
        return !root->children.empty();
    }
};

Trie tt = Trie();

void solve() {
    for (int j = 0; j < v.size(); j++) {
        if (tt.hasPrefix(v[j])) {
            cout << "NO" << '\n';
            return;
        }
    }

    cout << "YES" << '\n';
    return;
}

int main() {
    cin.tie(NULL);
    ios_base::sync_with_stdio(false);

    int t;

    cin >> t;

    for (int i = 0; i < t; i++) {
        v.clear();
        tt = Trie();
        int tmp;
        string s;

        cin >> tmp;

        for (int j = 0; j < tmp; j++) {
            cin >> s;
            v.push_back(s);
            tt.insert(s);
        }

        solve();
    }

    return 0;
}
