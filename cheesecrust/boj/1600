import java.io.*;
import java.util.*;

public class Main {
    static int[] dy = {0, 0, 1, -1};
    static int[] dx = {1, -1, 0, 0};

    static int[] knightY = {-2,-2,-1,-1,1,1,2,2};
    static int[] knightX = {-1,1,-2,2,-2,2,-1,1};
    static int K, W, H;
    static int[][] map;
    static boolean[][][] visit;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;


        K = Integer.parseInt(br.readLine());

        st = new StringTokenizer(br.readLine());
        W = Integer.parseInt(st.nextToken());
        H = Integer.parseInt(st.nextToken());

        map = new int[H][W];
        visit = new boolean[H][W][K + 1];

        for(int i = 0; i < H; i++){
            st = new StringTokenizer(br.readLine());
            for(int j = 0; j < W; j++){
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        int result = bfs();

        if(result == Integer.MAX_VALUE){
            System.out.println(-1);
            return;
        }
        System.out.println(result);
    }

    static int bfs(){
        Queue<Node> q = new LinkedList<>();
        // 방문했다.
        visit[0][0][K] = true;
        q.offer(new Node(0,0, 0, K));

        while (!q.isEmpty()){
            Node cur = q.poll();

            if(cur.y == H - 1 && cur.x == W - 1){

                return cur.cnt;
            }

            for(int i = 0; i < 4; i++){
                int nxtY = cur.y + dy[i];
                int nxtX = cur.x + dx[i];

                // 범위 밖이거나 방문을 했더라면 continue
                if(nxtY < 0 || nxtY >= H || nxtX < 0 || nxtX >= W ){
                    continue;
                }

                if(visit[nxtY][nxtX][cur.k] || map[nxtY][nxtX] == 1){
                    continue;
                }

                visit[nxtY][nxtX][cur.k] = true;
                q.offer(new Node(nxtY, nxtX, cur.cnt + 1, cur.k));
            }

            if(cur.k > 0){
                for(int i = 0; i < 8; i++){
                    int nxtY = cur.y + knightY[i];
                    int nxtX = cur.x + knightX[i];

                    // 범위 밖이거나 방문을 했더라면 continue
                    if(nxtY < 0 || nxtY >= H || nxtX < 0 || nxtX >= W )
                        continue;


                    if(visit[nxtY][nxtX][cur.k - 1] || map[nxtY][nxtX] == 1)
                        continue;

                    visit[nxtY][nxtX][cur.k - 1] = true;
                    q.offer(new Node(nxtY, nxtX, cur.cnt + 1, cur.k - 1));
                }
            }
        }
        return Integer.MAX_VALUE;
    }
}

class Node{
    int y, x, cnt, k;

    Node(int y, int x, int cnt, int k){
        this.y = y;
        this.x = x;
        this.cnt = cnt;
        this.k = k;
    }
}
