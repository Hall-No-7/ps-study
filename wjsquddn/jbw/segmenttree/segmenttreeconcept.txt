https://eun-jeong.tistory.com/18

123456789 까지의 합을 구한다고 하면 일반적으로 생각하는 방식으로 처음부터
더하면 O(N)이다. 너무 느리다. 

세그먼트 트리가 1번 부터 시작 하는 이유
*2를 하면 왼쪽 자식 *2 + 1을 하면 오른쪽 자식을 가리키게 되기 때문이다.

https://yabmoons.tistory.com/431

세그먼트 트리(Segment Tree)와 바이너리 인덱스 트리(Binary Indexed Tree 또는 Fenwick Tree)는 둘 다 구간 쿼리를 처리하는데 사용되는 자료 구조지만, 구현과 작동 방식에 차이가 있습니다.

1. 세그먼트 트리 (Segment Tree):
세그먼트 트리는 주로 구간 쿼리를 효율적으로 처리하기 위해 사용되는 자료 구조입니다. 원래 배열의 구간을 트리 형태로 분할하여 저장하며, 각 노드는 해당 구간에 대한 정보를 가지고 있습니다. 세그먼트 트리는 주로 다음과 같은 연산을 지원합니다.
- 구간 합 구하기
- 최소/최대값 찾기
- 구간 업데이트

세그먼트 트리는 배열 기반의 구현 방식이 일반적이며, 구간 쿼리를 처리하는데 O(log N) 시간이 소요됩니다. 하지만 구현이 상대적으로 복잡하고, 구간 업데이트 시에도 O(log N)의 시간이 소요되는 단점이 있습니다.

2. 바이너리 인덱스 트리 (Binary Indexed Tree or Fenwick Tree):
바이너리 인덱스 트리는 주로 배열의 누적 합을 효율적으로 계산하고 업데이트하는데 사용되는 자료 구조입니다. 주로 빠른 구간 합 연산을 처리하는 데에 특화되어 있습니다. 트리 형태를 가지며, 각 노드는 원래 배열의 구간 합 정보를 저장합니다.

바이너리 인덱스 트리는 다음과 같은 연산을 지원합니다.
- 누적 합 구하기
- 특정 위치 값 업데이트

바이너리 인덱스 트리는 배열의 크기 N에 대해 구간 합을 O(log N) 시간에 계산할 수 있습니다. 또한 구현이 상대적으로 간단하며, 메모리 사용도 상대적으로 적습니다. 하지만 최소/최대값을 찾는데는 사용할 수 없다는 단점이 있습니다.

요약하면, 세그먼트 트리는 구간 쿼리에 더 다양한 연산을 지원하고 구현이 복잡하지만, 바이너리 인덱스 트리는 구간 합을 효율적으로 계산하고 구현이 간단하다는 특징이 있습니다. 두 자료 구조는 각각의 장점과 용도에 따라 선택하여 사용하면 됩니다.